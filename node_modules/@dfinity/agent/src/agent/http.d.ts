import { ActorFactory } from '../actor';
import { Identity } from '../auth';
import { HttpAgentRequest, HttpAgentRequestTransformFn, QueryFields, QueryResponse, ReadRequest, ReadResponse, ReadStateFields, ReadStateResponse, SubmitRequest, SubmitResponse } from '../http_agent_types';
import * as IDL from '../idl';
import { Principal } from '../principal';
import { BinaryBlob, JsonObject } from '../types';
import { Agent } from './api';
export interface HttpAgentOptions {
    source?: HttpAgent;
    fetch?: typeof fetch;
    host?: string;
    identity?: Identity | Promise<Identity>;
    credentials?: {
        name: string;
        password?: string;
    };
}
export declare class HttpAgent implements Agent {
    private readonly _pipeline;
    private readonly _identity;
    private readonly _fetch;
    private readonly _host;
    private readonly _credentials;
    constructor(options?: HttpAgentOptions);
    addTransform(fn: HttpAgentRequestTransformFn, priority?: number): void;
    getPrincipal(): Promise<Principal | null>;
    call(canisterId: Principal | string, fields: {
        methodName: string;
        arg: BinaryBlob;
    }, identity?: Identity | Promise<Identity>): Promise<SubmitResponse>;
    install(canisterId: Principal | string, fields: {
        module: BinaryBlob;
        arg?: BinaryBlob;
    }, identity?: Identity | Promise<Identity>): Promise<SubmitResponse>;
    createCanister(identity?: Identity | Promise<Identity>): Promise<SubmitResponse>;
    query(canisterId: Principal | string, fields: QueryFields, identity?: Identity | Promise<Identity>): Promise<QueryResponse>;
    readState(fields: ReadStateFields, identity?: Identity | Promise<Identity>): Promise<ReadStateResponse>;
    status(): Promise<JsonObject>;
    makeActorFactory(actorInterfaceFactory: IDL.InterfaceFactory): ActorFactory;
    protected _transform(request: HttpAgentRequest): Promise<HttpAgentRequest>;
    protected submit(submit: SubmitRequest, identity: Identity): Promise<SubmitResponse>;
    protected read(request: ReadRequest, identity: Identity): Promise<ReadResponse>;
}
