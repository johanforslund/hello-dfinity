"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnonymousIdentity = exports.SignIdentity = void 0;
const buffer_1 = require("buffer/");
const principal_1 = require("./principal");
const request_id_1 = require("./request_id");
const types_1 = require("./types");
const domainSeparator = buffer_1.Buffer.from(new TextEncoder().encode('\x0Aic-request'));
/**
 * An Identity that can sign blobs.
 */
class SignIdentity {
    /**
     * Get the principal represented by this identity. Normally should be a
     * `Principal.selfAuthenticating()`.
     */
    getPrincipal() {
        return principal_1.Principal.selfAuthenticating(this.getPublicKey().toDer());
    }
    /**
     * Transform a request into a signed version of the request. This is done last
     * after the transforms on the body of a request. The returned object can be
     * anything, but must be serializable to CBOR.
     */
    async transformRequest(request) {
        const { body } = request, fields = __rest(request, ["body"]);
        const requestId = await request_id_1.requestIdOf(body);
        return Object.assign(Object.assign({}, fields), { body: {
                content: body,
                sender_pubkey: this.getPublicKey().toDer(),
                sender_sig: await this.sign(types_1.blobFromBuffer(buffer_1.Buffer.concat([domainSeparator, requestId]))),
            } });
    }
}
exports.SignIdentity = SignIdentity;
class AnonymousIdentity {
    getPrincipal() {
        return principal_1.Principal.anonymous();
    }
    async transformRequest(request) {
        return Object.assign(Object.assign({}, request), { body: { content: request.body } });
    }
}
exports.AnonymousIdentity = AnonymousIdentity;
//# sourceMappingURL=auth.js.map